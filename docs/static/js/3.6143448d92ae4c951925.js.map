{"version":3,"sources":["webpack:///src/components/fur.vue","webpack:///./src/components/fur.vue?f4f2","webpack:///./src/components/fur.vue","webpack:///./node_modules/howler/dist/howler.js"],"names":["fur","name","data","piano","src","e","ds","b","c","a","ms1","note","ms2","ms3","ms4","ms5","ms6","ms7","sq1","sq2","fur_elise","bpm","beat","vol","piece","components","navigation","methods","g","this","play","rhythm","getBeat","updateBPM","BPM","updateVol","howler","volume","components_fur","render","_vm","_h","$createElement","_c","_self","attrs","id","_v","fluid","grid-list-lg","row","wrap","justify-center","xs12","staticClass","staticStyle","text-align","color","round","large","on","click","align-center","label","min","max","step","thumb-label","height","change","model","value","callback","$$v","expression","prepend-icon","column","fab","toggleMetronome","_s","_e","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","__WEBPACK_AMD_DEFINE_RESULT__","HowlerGlobal","init","prototype","self","Howler","_counter","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","mobileAutoEnable","_setup","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","i","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","oncanplaythrough","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","_enableMobileAudio","isMobile","test","_mobileEnabled","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","then","_resumeAfterSuspend","Howl","o","console","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhrWithCredentials","xhrWithCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","push","event","action","load","url","str","exec","toLowerCase","warn","location","protocol","slice","Sound","loadBuffer","internal","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","_seek","duration","timeout","abs","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","Promise","catch","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","stop","noteOff","_cleanBuffer","isNaN","arguments","_interval","args","indexOf","apply","fade","from","to","len","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","clearInterval","cancelScheduledValues","loopStart","loopEnd","realTime","playing","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","index","splice","remCache","cache","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","code","ceil","__default","loadSound","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","xhr","XMLHttpRequest","open","withCredentials","responseType","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","standalone","exports","module","global","_super","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner"],"mappings":"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","file":"static/js/3.6143448d92ae4c951925.js","sourcesContent":["<template>\n    <v-app id=\"inspire\">\n        <navigation></navigation>\n        <v-container fluid grid-list-lg>\n            <v-layout row wrap justify-center>\n                <v-flex xs12>\n                    <h1 class=\"st\" style=\"text-align:center;\">Fur Elise</h1>\n                </v-flex>\n            </v-layout>\n            <v-flex xs12 style=\"text-align:center;\">\n                <v-btn class=\"general-btn\" color=\"success\" round large @click=\"g\">\n                    <v-icon>music_note</v-icon>Press Me!<v-icon>music_note</v-icon>\n                </v-btn>\n            </v-flex>\n            <br><br>\n            <v-layout row align-center>\n                <v-flex xs12>\n                    <v-slider name=\"bpm\" label=\"BPM\" :min=\"40\" :max=\"300\" step=\"5\" v-model=\"bpm\" @change=\"updateBPM\" thumb-label=\"always\" class=\"slider\" height=\"30\"></v-slider>\n                </v-flex>\n            </v-layout>\n            <v-flex xs12>\n                <v-slider name=\"volume\" prepend-icon=\"volume_up\" min=\"0\" max=\"1\" step=\"0.01\" v-model=\"vol\" @change=\"updateVol\" class=\"slider\" height=\"30\"></v-slider>\n            </v-flex>\n            <v-layout column wrap align-center>\n                <v-flex xs12>\n                    <v-btn class=\"general-btn\" color=\"primary\" fab @click=\"piece.rhythm.toggleMetronome\">Toggle Metronome</v-btn>\n                </v-flex>\n                <v-flex xs12>\n                    <p v-if=\"piece.rhythm.metronome\">\n                        Current Beat:{{piece.rhythm.getBeat()}}\n                    </p>\n                </v-flex>\n            </v-layout>\n            <br><br><br>\n        </v-container>\n    </v-app>\n</template>\n\n<script>\nimport {\n    Howl,\n    Howler\n} from 'howler'\nimport {Measure,Note, major_scale, Piece, Sequence, Piano}  from 'note-art'\nimport navigation from './Navigation'\n\nexport default {\n    name: \"Play\",\n    data() {\n        const piano = new Piano()\n        const e = new Note('e', 5, 'e'),\n            ds = new Note('d#', 5, 'e'),\n            b = new Note('b', 4, 'e'),\n            d = new Note('d', 5, 'e'),\n            c = new Note('c', 5, 'e'),\n            a = new Note('a', 4, 'q'),\n            notes = []\n        const ms1 = new Measure([piano.note('e5e'), piano.note('d#5e')]),\n            ms2 = new Measure([piano.note('e5e'), piano.note('d#5e'), piano.note('e5e'), piano.note('b4e'), piano.note('d5e'), piano.note('c5e')]),\n            ms3 = new Measure([\n                [piano.note('a4q'), piano.note('a2e')], piano.note('e3e'), piano.note('a3e'), piano.note('c4e'), piano.note('e4e'), piano.note('a4e')\n            ]),\n            ms4 = new Measure([\n                [piano.note('b4q'), piano.note('e2e')], piano.note('e3e'), new Note('g#', 3, 'e'), new Note('e', 4, 'e'), new Note('g#', 4, 'e'), new Note('b', 4, 'e')\n            ]),\n            ms5 = new Measure([\n                [piano.note('c5q'), new Note('a', 2, 'e')], new Note('e', 3, 'e'), new Note('a', 3, 'e'), new Note('e', 4, 'e'), e, ds\n            ]),\n            ms6 = new Measure([\n                [piano.note('b4q'), piano.note('e2e')], piano.note('e3e'), new Note('g#', 3, 'e'), new Note('e', 4, 'e'), c, b\n            ]),\n            ms7 = new Measure([\n                [a, new Note('a', 2, 'h'), ], new Note('e', 3, 'e'), new Note('a', 3, 'q'), e, ds\n            ])\n        const sq1 = new Sequence([ms2, ms3, ms4, ms5]),\n            sq2 = new Sequence([ms2, ms3, ms6, ms7])\n        let bpm = 120\n        const fur_elise = [ms1, sq1, sq2,sq1, sq2, sq1, sq2, sq1, sq2]\n        return {\n            bpm,\n            beat: null,\n            vol: 1,\n            piece: new Piece(bpm, [4, 4], fur_elise),\n        }\n    },\n    components: {\n        navigation\n    },\n    methods: {\n        g() {\n            this.piece.play()\n            this.beat = this.piece.rhythm.getBeat()\n        },\n        updateBPM() {\n            this.piece.BPM = this.bpm\n        },\n        updateVol() {\n            Howler.volume([this.vol])\n        }\n    }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n#app{\n    text-align: center;\n}\n  h1,\n  h2 {\n    font-weight: normal;\n          font-size: 40pt;\n      /* background-color: aqua; */\n  }\n  p, span{\n      font-size: 20pt;\n      color: red;\n      display: inline;\n  }\n  .slider{\n      background-color: lavender;\n  }\n.v-btn {\n  width: 100pt;\n  height: 60pt;\n}\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/fur.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-app',{attrs:{\"id\":\"inspire\"}},[_c('navigation'),_vm._v(\" \"),_c('v-container',{attrs:{\"fluid\":\"\",\"grid-list-lg\":\"\"}},[_c('v-layout',{attrs:{\"row\":\"\",\"wrap\":\"\",\"justify-center\":\"\"}},[_c('v-flex',{attrs:{\"xs12\":\"\"}},[_c('h1',{staticClass:\"st\",staticStyle:{\"text-align\":\"center\"}},[_vm._v(\"Fur Elise\")])])],1),_vm._v(\" \"),_c('v-flex',{staticStyle:{\"text-align\":\"center\"},attrs:{\"xs12\":\"\"}},[_c('v-btn',{staticClass:\"general-btn\",attrs:{\"color\":\"success\",\"round\":\"\",\"large\":\"\"},on:{\"click\":_vm.g}},[_c('v-icon',[_vm._v(\"music_note\")]),_vm._v(\"Press Me!\"),_c('v-icon',[_vm._v(\"music_note\")])],1)],1),_vm._v(\" \"),_c('br'),_c('br'),_vm._v(\" \"),_c('v-layout',{attrs:{\"row\":\"\",\"align-center\":\"\"}},[_c('v-flex',{attrs:{\"xs12\":\"\"}},[_c('v-slider',{staticClass:\"slider\",attrs:{\"name\":\"bpm\",\"label\":\"BPM\",\"min\":40,\"max\":300,\"step\":\"5\",\"thumb-label\":\"always\",\"height\":\"30\"},on:{\"change\":_vm.updateBPM},model:{value:(_vm.bpm),callback:function ($$v) {_vm.bpm=$$v},expression:\"bpm\"}})],1)],1),_vm._v(\" \"),_c('v-flex',{attrs:{\"xs12\":\"\"}},[_c('v-slider',{staticClass:\"slider\",attrs:{\"name\":\"volume\",\"prepend-icon\":\"volume_up\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\",\"height\":\"30\"},on:{\"change\":_vm.updateVol},model:{value:(_vm.vol),callback:function ($$v) {_vm.vol=$$v},expression:\"vol\"}})],1),_vm._v(\" \"),_c('v-layout',{attrs:{\"column\":\"\",\"wrap\":\"\",\"align-center\":\"\"}},[_c('v-flex',{attrs:{\"xs12\":\"\"}},[_c('v-btn',{staticClass:\"general-btn\",attrs:{\"color\":\"primary\",\"fab\":\"\"},on:{\"click\":_vm.piece.rhythm.toggleMetronome}},[_vm._v(\"Toggle Metronome\")])],1),_vm._v(\" \"),_c('v-flex',{attrs:{\"xs12\":\"\"}},[(_vm.piece.rhythm.metronome)?_c('p',[_vm._v(\"\\n                    Current Beat:\"+_vm._s(_vm.piece.rhythm.getBeat())+\"\\n                \")]):_vm._e()])],1),_vm._v(\" \"),_c('br'),_c('br'),_c('br')],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-3e86f8de\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/fur.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-3e86f8de\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./fur.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./fur.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./fur.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-3e86f8de\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./fur.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-3e86f8de\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/fur.vue\n// module id = null\n// module chunks = ","/*!\n *  howler.js v2.0.15\n *  howlerjs.com\n *\n *  (c) 2013-2018, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto iOS enabler.\n      self.mobileAutoEnable = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'running' : 'running';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Mobile browsers will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _enableMobileAudio: function() {\n      var self = this || Howler;\n\n      // Only run this on mobile devices if audio isn't already eanbled.\n      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi|Chrome/i.test(self._navigator && self._navigator.userAgent);\n      if (self._mobileEnabled || !self.ctx || !isMobile) {\n        return;\n      }\n\n      self._mobileEnabled = false;\n      self.mobileAutoEnable = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Fix Android can not play in suspend state.\n        Howler._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._mobileEnabled = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        });\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhrWithCredentials = o.xhrWithCredentials || false;\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio on iOS.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {\n        Howler._enableMobileAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        var num = 0;\n        for (var i=0; i<self._sounds.length; i++) {\n          if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n            num++;\n            id = self._sounds[i]._id;\n          }\n        }\n\n        if (num === 1) {\n          sprite = null;\n        } else {\n          id = null;\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Makr this sounded as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n      // Update the parameters of the sound\n      sound._paused = false;\n      sound._ended = false;\n      sound._sprite = sprite;\n      sound._seek = seek;\n      sound._start = self._sprite[sprite][0] / 1000;\n      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // End the sound instantly if seek is at the end.\n      if (sound._seek >= sound._stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running') {\n          playWebAudio();\n        } else {\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Mobile browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n                });\n            } else if (!internal) {\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Make sure the volume is in the right bounds.\n        vol = Math.max(0, vol);\n        vol = Math.min(1, vol);\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            sound._rateSeek = self.seek(id[i]);\n            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n          if (!checkIE) {\n            sounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n          }\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n      }\n      node.bufferSource = null;\n\n      return self;\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else {\n        self._node = new Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.withCredentials = self._xhrWithCredentials;\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Define globally in case AMD is not available or unused.\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.0.15\n *  howlerjs.com\n *\n *  (c) 2013-2018, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/howler/dist/howler.js\n// module id = k9Ku\n// module chunks = 3"],"sourceRoot":""}